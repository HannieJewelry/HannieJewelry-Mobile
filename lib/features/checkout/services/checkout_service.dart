import 'package:flutter/foundation.dart';
import '../../../core/services/api_service.dart';
import '../../profile/models/address_model.dart';
import '../models/order_model.dart';

class CheckoutService extends ChangeNotifier {
  final ApiService _apiService;
  bool _isLoading = false;
  String? _error;
  Map<String, dynamic>? _checkoutData;

  // Getters
  bool get isLoading => _isLoading;
  String? get error => _error;
  Map<String, dynamic>? get checkoutData => _checkoutData;

  // Constructor
  CheckoutService({ApiService? apiService}) 
      : _apiService = apiService ?? ApiService();

  // Get checkout information using JWT authentication
  Future<Map<String, dynamic>?> getCheckoutInfo() async {
    _isLoading = true;
    _error = null;
    notifyListeners();
    
    try {
      if (kDebugMode) {
        print('üõí Fetching checkout info with JWT authentication');
      }
      
      final response = await _apiService.get('/api/client/checkout');
      
      if (kDebugMode) {
        print('üõí Checkout response: $response');
        print('üõí Full response data: ${response['data']}');
        print('üõí Response code: ${response['code']}');
        print('üõí Response message: ${response['message']}');
      }
      
      if (response['code'] == 200 && response['data'] != null) {
        _checkoutData = response['data'];
        _error = null;
        
        if (kDebugMode) {
          print('‚úÖ Checkout info fetched successfully');
          print('   Total: ${getTotalPrice(_checkoutData)}');
          print('   Items: ${getLineItems(_checkoutData).length}');
          print('   Shipping methods: ${getShippingMethods(_checkoutData).length}');
          print('   Payment methods: ${getPaymentMethods(_checkoutData).length}');
        }
        
        notifyListeners();
        return _checkoutData;
      } else {
        _error = response['message'] ?? 'Failed to fetch checkout information';
        if (kDebugMode) {
          print('‚ùå Error fetching checkout info: $_error');
        }
        notifyListeners();
        return null;
      }
    } catch (e) {
      _error = e.toString();
      if (kDebugMode) {
        print('‚ùå Exception fetching checkout info: $e');
      }
      notifyListeners();
      return null;
    } finally {
      _isLoading = false;
      notifyListeners();
    }
  }
  
  // Convert checkout data to OrderModel
  OrderModel? convertToOrderModel(Map<String, dynamic>? data) {
    if (data == null) return null;
    
    try {
      final lineItems = getLineItems(data);
      final List<OrderItem> orderItems = lineItems.map((item) => 
        OrderItem(
          productId: item['product_id'] ?? item['id'] ?? '',
          name: item['product_title'] ?? item['title'] ?? 'Unknown Product',
          imageUrl: item['image_url'] ?? item['image'] ?? '',
          price: _toDouble(item['price'] ?? 0),
          quantity: item['quantity'] ?? 1,
        )
      ).toList();
      
      return OrderModel(
        id: data['id'] ?? '',
        items: orderItems,
        totalAmount: getTotalPrice(data),
        shippingFee: getShippingCost(data),
        deliveryMethod: DeliveryMethod.delivery, // Default
        paymentMethod: PaymentMethod.cod, // Default
        recipientName: data['full_name'] ?? '',
        recipientPhone: data['phone'] ?? '',
        recipientAddress: data['shipping_address'] ?? '',
        note: data['note']?.toString(),
        createdAt: DateTime.now(),
        updatedAt: DateTime.now(),
      );
    } catch (e) {
      if (kDebugMode) {
        print('‚ùå Error converting to OrderModel: $e');
      }
      return null;
    }
  }
  
  // Ki·ªÉm tra xem checkout c√≥ d·ªØ li·ªáu kh√¥ng
  bool hasCheckoutData() {
    return _checkoutData != null && _checkoutData!.isNotEmpty;
  }
  
  // L·∫•y th√¥ng tin kh√°ch h√†ng t·ª´ checkout
  Map<String, dynamic>? getCustomerInfo(Map<String, dynamic>? data) {
    if (data == null) return null;
    
    try {
      return {
        'full_name': data['full_name'],
        'email': data['email'],
        'phone': data['phone'],
        'phone_country_code': data['phone_country_code'],
      };
    } catch (e) {
      if (kDebugMode) {
        print('‚ùå Error parsing customer info: $e');
      }
      return null;
    }
  }
  
  // Parse address information from checkout data
  Address? parseShippingAddress(Map<String, dynamic>? data) {
    if (data == null) return null;
    
    try {
      // Ki·ªÉm tra xem c√≥ ƒë·ªãa ch·ªâ giao h√†ng trong d·ªØ li·ªáu checkout kh√¥ng
      if (data['shipping_address'] == null && 
          data['shipping_province_id'] == null &&
          data['shipping_district_id'] == null) {
        return null;
      }
      
      // T·∫°o d·ªØ li·ªáu ƒë·ªãa ch·ªâ t·ª´ c√°c tr∆∞·ªùng ri√™ng l·∫ª
      final String name = data['full_name'] ?? '';
      final String phone = data['phone'] ?? '';
      
      // X√¢y d·ª±ng ƒë·ªãa ch·ªâ t·ª´ c√°c th√†nh ph·∫ßn
      final String address1 = data['shipping_address'] ?? '';
      final String city = data['shipping_city'] ?? '';
      final String zip = data['shipping_zip_code'] ?? '';
      final String company = data['shipping_company'] ?? '';
      
      // T·∫°o firstName v√† lastName t·ª´ fullName n·∫øu c√≥
      String firstName = '';
      String lastName = '';
      if (name.isNotEmpty) {
        final nameParts = name.split(' ');
        if (nameParts.length > 1) {
          firstName = nameParts.first;
          lastName = nameParts.skip(1).join(' ');
        } else {
          firstName = name;
          lastName = '';
        }
      }
      
      return Address(
        id: '', // ID kh√¥ng c√≥ trong response
        firstName: firstName,
        lastName: lastName,
        name: name,
        address1: address1,
        address2: '',
        city: city,
        company: company,
        countryCode: 'VN', // M·∫∑c ƒë·ªãnh l√† Vi·ªát Nam
        districtCode: data['shipping_district_id']?.toString(),
        provinceCode: data['shipping_province_id']?.toString(),
        wardCode: data['shipping_ward_id']?.toString(),
        phone: phone,
        zip: zip,
        isDefault: false,
      );
    } catch (e) {
      if (kDebugMode) {
        print('‚ùå Error parsing shipping address: $e');
      }
      return null;
    }
  }
  
  // Get shipping methods available for the checkout
  List<Map<String, dynamic>> getShippingMethods(Map<String, dynamic>? data) {
    if (data == null || !data.containsKey('shipping_methods')) {
      return [];
    }
    
    try {
      // API tr·∫£ v·ªÅ danh s√°ch shipping methods l√† m·ªôt m·∫£ng c√°c object
      return List<Map<String, dynamic>>.from(data['shipping_methods'] ?? []);
    } catch (e) {
      if (kDebugMode) {
        print('‚ùå Error parsing shipping methods: $e');
      }
      return [];
    }
  }
  
  // Get payment methods available for the checkout
  List<Map<String, dynamic>> getPaymentMethods(Map<String, dynamic>? data) {
    if (data == null || !data.containsKey('payment_methods')) {
      return [];
    }
    
    try {
      // API tr·∫£ v·ªÅ danh s√°ch payment methods l√† m·ªôt m·∫£ng c√°c object
      return List<Map<String, dynamic>>.from(data['payment_methods'] ?? []);
    } catch (e) {
      if (kDebugMode) {
        print('‚ùå Error parsing payment methods: $e');
      }
      return [];
    }
  }
  
  // Get subtotal amount
  double getSubtotal(Map<String, dynamic>? data) {
    if (data == null) return 0.0;
    
    try {
      // Trong response m·ªõi, tr∆∞·ªùng n√†y l√† sub_total_before_tax
      return _toDouble(data['sub_total_before_tax'] ?? 0.0);
    } catch (e) {
      if (kDebugMode) {
        print('‚ùå Error getting subtotal: $e');
      }
      return 0.0;
    }
  }
  
  // Get shipping cost
  double getShippingCost(Map<String, dynamic>? data) {
    if (data == null) return 0.0;
    
    try {
      // Trong response m·ªõi, tr∆∞·ªùng n√†y l√† shipping
      return _toDouble(data['shipping'] ?? 0.0);
    } catch (e) {
      if (kDebugMode) {
        print('‚ùå Error getting shipping cost: $e');
      }
      return 0.0;
    }
  }
  
  // Get total price
  double getTotalPrice(Map<String, dynamic>? data) {
    if (data == null) return 0.0;
    
    try {
      // Trong response m·ªõi, tr∆∞·ªùng n√†y l√† total
      return _toDouble(data['total'] ?? 0.0);
    } catch (e) {
      if (kDebugMode) {
        print('‚ùå Error getting total price: $e');
      }
      return 0.0;
    }
  }
  
  // Get tax amount
  double getTaxAmount(Map<String, dynamic>? data) {
    if (data == null) return 0.0;
    
    try {
      // Trong response m·ªõi, c√≥ th·ªÉ t√≠nh b·∫±ng c√°ch c·ªông c√°c lo·∫°i thu·∫ø
      final double includedTax = _toDouble(data['total_tax_included'] ?? 0.0);
      final double notIncludedTax = _toDouble(data['total_tax_not_included'] ?? 0.0);
      return includedTax + notIncludedTax;
    } catch (e) {
      if (kDebugMode) {
        print('‚ùå Error getting tax amount: $e');
      }
      return 0.0;
    }
  }
  
  // Get discount amount
  double getDiscountAmount(Map<String, dynamic>? data) {
    if (data == null) return 0.0;
    
    try {
      // Trong response m·ªõi, tr∆∞·ªùng n√†y l√† discount
      return _toDouble(data['discount'] ?? 0.0);
    } catch (e) {
      if (kDebugMode) {
        print('‚ùå Error getting discount amount: $e');
      }
      return 0.0;
    }
  }
  
  // Get line items (products)
  List<Map<String, dynamic>> getLineItems(Map<String, dynamic>? data) {
    if (data == null || !data.containsKey('line_items')) {
      return [];
    }
    
    try {
      // API tr·∫£ v·ªÅ danh s√°ch line_items l√† m·ªôt m·∫£ng c√°c object
      return List<Map<String, dynamic>>.from(data['line_items'] ?? []);
    } catch (e) {
      if (kDebugMode) {
        print('‚ùå Error parsing line items: $e');
      }
      return [];
    }
  }
  
  // L·∫•y t·ªïng s·ªë l∆∞·ª£ng s·∫£n ph·∫©m trong gi·ªè h√†ng
  int getTotalQuantity(Map<String, dynamic>? data) {
    if (data == null) return 0;
    
    try {
      final lineItems = getLineItems(data);
      int totalQuantity = 0;
      for (var item in lineItems) {
        totalQuantity += (item['quantity'] as int? ?? 0);
      }
      return totalQuantity;
    } catch (e) {
      if (kDebugMode) {
        print('‚ùå Error calculating total quantity: $e');
      }
      return 0;
    }
  }
  
  // L·∫•y th√¥ng tin v·ªÅ ghi ch√∫ ƒë∆°n h√†ng
  String getOrderNote(Map<String, dynamic>? data) {
    if (data == null) return '';
    
    try {
      return data['note']?.toString() ?? '';
    } catch (e) {
      return '';
    }
  }
  
  // Get order attributes
  Map<String, dynamic> getOrderAttributes(Map<String, dynamic>? data) {
    if (data == null || !data.containsKey('attributes')) {
      return {};
    }
    
    try {
      return Map<String, dynamic>.from(data['attributes'] ?? {});
    } catch (e) {
      if (kDebugMode) {
        print('‚ùå Error parsing order attributes: $e');
      }
      return {};
    }
  }
  
  // Update checkout information
  Future<Map<String, dynamic>?> updateCheckout({
    String? addressId,
    String? note,
    int? shippingMethodId,
    int? paymentMethodId,
    List<Map<String, dynamic>>? attributes,
  }) async {
    _isLoading = true;
    _error = null;
    notifyListeners();
    
    try {
      if (kDebugMode) {
        print('üõí Updating checkout info');
      }
      
      // X√¢y d·ª±ng request body theo API specification
      final Map<String, dynamic> requestBody = {};
      
      // Th√™m c√°c th√¥ng tin theo format m·ªõi
      if (addressId != null) requestBody['address_id'] = addressId;
      if (note != null) requestBody['note'] = note;
      if (shippingMethodId != null) requestBody['shipping_method_id'] = shippingMethodId;
      if (paymentMethodId != null) requestBody['payment_method_id'] = paymentMethodId;
      
      // Th√™m c√°c thu·ªôc t√≠nh b·ªï sung n·∫øu ƒë∆∞·ª£c cung c·∫•p
      if (attributes != null && attributes.isNotEmpty) {
        requestBody['attributes'] = attributes;
      }
      
      if (kDebugMode) {
        print('üõí Checkout update request: $requestBody');
      }
      
      // G·ª≠i request PUT ƒë·∫øn API
      final response = await _apiService.put('/api/client/checkout', requestBody);
      
      if (kDebugMode) {
        print('üõí Checkout update response: $response');
        print('üõí Full update response data: ${response['data']}');
        print('üõí Update response code: ${response['code']}');
        print('üõí Update response message: ${response['message']}');
      }
      
      if (response['code'] == 200 && response['data'] != null) {
        // C·∫≠p nh·∫≠t d·ªØ li·ªáu checkout trong b·ªô nh·ªõ
        _checkoutData = response['data'];
        _error = null;
        
        if (kDebugMode) {
          print('‚úÖ Checkout updated successfully');
          print('   Total: ${getTotalPrice(_checkoutData)}');
        }
        
        notifyListeners();
        return _checkoutData;
      } else {
        _error = response['message'] ?? 'Failed to update checkout information';
        if (kDebugMode) {
          print('‚ùå Error updating checkout: $_error');
        }
        notifyListeners();
        return null;
      }
    } catch (e) {
      _error = e.toString();
      if (kDebugMode) {
        print('‚ùå Exception updating checkout: $e');
      }
      notifyListeners();
      return null;
    } finally {
      _isLoading = false;
      notifyListeners();
    }
  }

  // Complete checkout and create order
  Future<Map<String, dynamic>?> completeCheckout() async {
    _isLoading = true;
    _error = null;
    notifyListeners();
    
    try {
      if (kDebugMode) {
        print('üõí Completing checkout');
      }
      
      // G·ª≠i request POST ƒë·∫øn API endpoint /complete
      final response = await _apiService.post('/api/client/checkout/complete', {});
      
      if (kDebugMode) {
        print('üõí Checkout complete response: $response');
        print('üõí Full complete response data: ${response['data']}');
        print('üõí Complete response code: ${response['code']}');
        print('üõí Complete response message: ${response['message']}');
      }
      
      if (response['code'] == 202 && response['data'] != null) {
        // Tr·∫£ v·ªÅ th√¥ng tin ƒë∆°n h√†ng
        final orderData = response['data'];
        
        if (kDebugMode) {
          print('‚úÖ Checkout completed successfully');
          print('   Order data: $orderData');
        }
        
        // Reset checkout data sau khi ho√†n t·∫•t
        _checkoutData = null;
        
        notifyListeners();
        return orderData;
      } else {
        _error = response['message'] ?? 'Failed to complete checkout';
        if (kDebugMode) {
          print('‚ùå Error completing checkout: $_error');
        }
        notifyListeners();
        return null;
      }
    } catch (e) {
      _error = e.toString();
      if (kDebugMode) {
        print('‚ùå Exception completing checkout: $e');
      }
      notifyListeners();
      return null;
    } finally {
      _isLoading = false;
      notifyListeners();
    }
  }
  
  // Calculate total price with selected shipping method
  double calculateTotalWithShipping(Map<String, dynamic>? data, int? selectedShippingMethodId) {
    if (data == null) return 0.0;
    
    try {
      // Get base subtotal
      final double subtotal = getSubtotal(data);
      
      // Get discount amount
      final double discount = getDiscountAmount(data);
      
      // Get shipping cost based on selected method
      double shippingCost = 0.0;
      if (selectedShippingMethodId != null) {
        final shippingMethods = getShippingMethods(data);
        for (var method in shippingMethods) {
          final methodId = method['id'];
          if (methodId == selectedShippingMethodId) {
            shippingCost = method['price'] is num ? (method['price'] as num).toDouble() : 0.0;
            break;
          }
        }
      } else {
        shippingCost = getShippingCost(data);
      }
      
      // Calculate and return total
      return subtotal + shippingCost - discount;
    } catch (e) {
      if (kDebugMode) {
        print('‚ùå Error calculating total with shipping: $e');
      }
      return 0.0;
    }
  }
  
  // Helper method to convert to double
  double _toDouble(dynamic value) {
    if (value == null) return 0.0;
    if (value is double) return value;
    if (value is int) return value.toDouble();
    if (value is String) {
      try {
        return double.parse(value);
      } catch (_) {
        return 0.0;
      }
    }
    return 0.0;
  }
} 